ASoC Machine Driver
===================

The ASoC machine (or board) driver is the code that glues together all the
component drivers (e.g. codecs, platforms and DAIs). It also describes the
relationships between each componnent which include audio paths, GPIOs,
interrupts, clocking, jacks and voltage regulators.

ASoCドライバは全てのコンポーネントドライバ（コーデック、プラットホーム、DAIなど）を含んだコードです。
また、オーディオパス、GPIO、割り込み、クロッキング、ジャックおよび電圧レギュレータを含む
各コンポーネント間の関係を記載しています。

The machine driver can contain codec and platform specific code. It registers
the audio subsystem with the kernel as a platform device and is represented by
the following struct:-

マシンドライバは、コーデックと、プラットフォーム固有のコードを含めることができます。
以下は、プラットフォームデバイスとしてカーネルとオーディオ・サブシステムを登録し、以下の構造体で表現されています： - 

/* SoC machine */
struct snd_soc_card {
	char *name;

	...

	int (*probe)(struct platform_device *pdev);
	int (*remove)(struct platform_device *pdev);

	/* the pre and post PM functions are used to do any PM work before and
	 * after the codec and DAIs do any PM work. */
	int (*suspend_pre)(struct platform_device *pdev, pm_message_t state);
	int (*suspend_post)(struct platform_device *pdev, pm_message_t state);
	int (*resume_pre)(struct platform_device *pdev);
	int (*resume_post)(struct platform_device *pdev);

	...

	/* CPU <--> Codec DAI links  */
	struct snd_soc_dai_link *dai_link;
	int num_links;

	...
};

probe()/remove()
----------------
probe/remove are optional. Do any machine specific probe here.
probe/removeはオプションです。ここで任意のマシンの特定の初期化を行います

suspend()/resume()
------------------
The machine driver has pre and post versions of suspend and resume to take care
of any machine audio tasks that have to be done before or after the codec, DAIs
and DMA is suspended and resumed. Optional.
マシンドライバが一時停止し、前またはコーデックの後に実行する必要が任意のマシンの
オーディオタスクの世話をするために再開し、DAIとDMAを中断および再開されたの前と後の
バージョンがあります。 任意です。

Machine DAI Configuration
マシンDAIコンフィギュレーション
-------------------------
The machine DAI configuration glues all the codec and CPU DAIs together. It can
also be used to set up the DAI system clock and for any machine related DAI
initialisation e.g. the machine audio map can be connected to the codec audio
map, unconnected codec pins can be set as such.
マシンDAIコンフィギュレーションは全てのコーデックやCPU DAIをくっつけます。
できる
また、DAIシステムクロックを設定するために使用し、DAIに関連する任意のマシンのためにすること
初期例えば、マシンオーディオマップは、コーデック、オーディオに接続することができます。
マップ、接続されていないコーデックピンは、として設定することができます。

struct snd_soc_dai_link is used to set up each DAI in your machine. e.g.

/* corgi digital audio interface glue - connects codec <--> CPU */
static struct snd_soc_dai_link corgi_dai = {
	.name = "WM8731",
	.stream_name = "WM8731",
	.cpu_dai_name = "pxa-is2-dai",
	.codec_dai_name = "wm8731-hifi",
	.platform_name = "pxa-pcm-audio",
	.codec_name = "wm8713-codec.0-001a",
	.init = corgi_wm8731_init,
	.ops = &corgi_ops,
};

struct snd_soc_card then sets up the machine with its DAIs. e.g.

/* corgi audio machine driver */
static struct snd_soc_card snd_soc_corgi = {
	.name = "Corgi",
	.dai_link = &corgi_dai,
	.num_links = 1,
};


Machine Power Map
-----------------

The machine driver can optionally extend the codec power map and to become an
audio power map of the audio subsystem. This allows for automatic power up/down
of speaker/HP amplifiers, etc. Codec pins can be connected to the machines jack
sockets in the machine init function.

マシン ドライバは、必要に応じて、コーデックパワーマップを拡張することができるとなるために
オーディオサブシステムのオーディオパワーマップ。
これは、コーデックピンを機械init関数内のマシンジャックソケットに接続することができるなど、
スピーカー/ HPアンプのダウン/自動パワーアップを可能にします。


Machine Controls
----------------

Machine specific audio mixer controls can be added in the DAI init function.
マシン固有のオーディオミキサーコントロールは、DAIのinit関数に追加することができます。
